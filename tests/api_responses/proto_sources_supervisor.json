[{"name":"service.proto","content":"// Copyright 2020 The Exonum Team\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage exonum.supervisor;\n\nimport \"exonum/crypto/types.proto\";\nimport \"exonum/blockchain.proto\";\nimport \"exonum/runtime/base.proto\";\nimport \"exonum/runtime/errors.proto\";\nimport \"exonum/runtime/lifecycle.proto\";\nimport \"google/protobuf/empty.proto\";\n\n// Transactions\n\n// Request for the artifact deployment.\nmessage DeployRequest {\n  // Artifact identifier.\n  exonum.runtime.ArtifactId artifact = 1;\n  // Additional information for Runtime to deploy.\n  bytes spec = 2;\n  // The height until which the deployment procedure should be completed.\n  uint64 deadline_height = 3;\n  // Seed to allow several deployments with the same params.\n  uint64 seed = 4;\n}\n\n// Confirmation that artifact deployment has ended for a validator.\n// Result can be either successful or unsuccessful.\nmessage DeployResult {\n  // Corresponding request.\n  DeployRequest request = 1;\n  // Result of deployment.\n  exonum.runtime.ExecutionStatus result = 2;\n}\n\n// Request to start a new service instance.\nmessage StartService {\n  // Artifact identifier.\n  exonum.runtime.ArtifactId artifact = 1;\n  // Instance name.\n  string name = 2;\n  // Instance configuration.\n  bytes config = 3;\n}\n\n// Request to stop an existing service instance.\nmessage StopService {\n  // Corresponding service instance ID.\n  uint32 instance_id = 1;\n}\n\n// Request to freeze an existing service instance.\nmessage FreezeService {\n  // Corresponding service instance ID.\n  uint32 instance_id = 1;\n}\n\n// Configuration parameters of the certain service instance.\nmessage ServiceConfig {\n  // Corresponding service instance ID.\n  uint32 instance_id = 1;\n  // Raw bytes representation of service configuration parameters.\n  bytes params = 2;\n}\n\n// Request to resume a previously stopped service instance.\nmessage ResumeService {\n  // Corresponding service instance ID.\n  uint32 instance_id = 1;\n  // Raw bytes representation of service resume parameters.\n  bytes params = 3;\n}\n\n// Request to unload an unused artifact.\nmessage UnloadArtifact {\n  // Artifact identifier.\n  exonum.runtime.ArtifactId artifact_id = 1;\n}\n\n// This message contains one atomic configuration change.\nmessage ConfigChange {\n  oneof kind {\n    // New consensus config.\n    exonum.Config consensus = 1;\n    // New service instance config.\n    ServiceConfig service = 2;\n    // Request to start a new service instance.\n    StartService start_service = 3;\n    // Request to stop an existing service instance.\n    StopService stop_service = 4;\n    // Request to resume a previously stopped service instance.\n    ResumeService resume_service = 5;\n    // Request to freeze an existing service instance.\n    FreezeService freeze_service = 6;\n    // Request to unload an unused artifact.\n    UnloadArtifact unload_artifact = 7;\n  }\n}\n\n// Request for the configuration change\nmessage ConfigPropose {\n  // The height until which the update configuration procedure should be\n  // completed.\n  uint64 actual_from = 1;\n  // New configuration proposition.\n  repeated ConfigChange changes = 2;\n  // Configuration proposal number to avoid conflicting proposals.\n  // For every proposal, this field should be equal to the amount of\n  // valid processed proposals (no matter accepted or not).\n  // Appropriate value for this field can be obtained via \"configuration-number\"\n  // API endpoint.\n  uint64 configuration_number = 3;\n}\n\n// Confirmation vote for the configuration change\nmessage ConfigVote {\n  // Hash of configuration proposition.\n  exonum.crypto.Hash propose_hash = 1;\n}\n\n// Supervisor operating mode.\nenum SupervisorMode {\n  SIMPLE = 0;\n  DECENTRALIZED = 1;\n}\n\n// Request for the service data migration.\nmessage MigrationRequest {\n  // New artifact identifier.\n  exonum.runtime.ArtifactId new_artifact = 1;\n  // Name of service for a migration.\n  string service = 2;\n  // The height until which the migration procedure should be completed.\n  uint64 deadline_height = 3;\n  // Seed to allow several migrations with the same params.\n  uint64 seed = 4;\n}\n\n// Confirmation that migration has ended for a validator.\n// Status can be either successful or unsuccessful.\nmessage MigrationResult {\n  // Corresponding request.\n  MigrationRequest request = 1;\n  // Status of migration.\n  exonum.runtime.MigrationStatus status = 2;\n}\n\n// Supervisor service configuration (not to be confused with `ConfigPropose`,\n// which contains core/service configuration change proposal).\nmessage Config {\n  // Supervisor operating mode.\n  SupervisorMode mode = 1;\n}\n"},{"name":"schema.proto","content":"// Copyright 2020 The Exonum Team\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage exonum.supervisor;\n\nimport \"exonum/crypto/types.proto\";\nimport \"exonum/runtime/errors.proto\";\nimport \"service.proto\";\n\nmessage ConfigProposalWithHash {\n    exonum.crypto.Hash propose_hash = 1;\n    ConfigPropose config_propose = 2;\n}\n\n// Information about deploy error.\nmessage ErrorInfo {\n    // Height on which error occurred.\n    uint64 height = 1;\n    // Occurred error.\n    exonum.runtime.ExecutionError error = 2;\n}\n\n// Asynchronous event (e.g. deploy or migration) state.\nmessage AsyncEventState {\n    enum Type {\n        // Event is in process.\n        PENDING = 0;\n        // Event errored.\n        FAIL = 1;\n        // Deadline was reached.\n        TIMEOUT = 2;\n        // Event succeed.\n        SUCCESS = 3;\n    }\n\n    // Event state.\n    Type state = 1;\n    // Set only for `type == FAIL`.\n    ErrorInfo error = 2;\n}\n\n// Migration state.\nmessage MigrationState {\n    AsyncEventState inner = 1;\n    string version = 2;\n    exonum.crypto.Hash reference_state_hash = 3;\n}\n"}]
